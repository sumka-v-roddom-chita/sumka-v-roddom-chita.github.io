{"version":3,"sources":["components/navigation.jsx","components/header.jsx","components/features.jsx","components/services.jsx","components/footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Navigation","props","id","className","type","data-toggle","data-target","href","Header","bg","zIndex","position","top","data","title","paragraph","Features","map","d","i","icon","text","Services","name","Footer","App","SmoothScroll","speed","speedAsDuration","useState","landingPageData","setLandingPageData","useEffect","JsonData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"g3FAAaA,EAAa,SAACC,GACzB,OACE,qBAAKC,GAAG,OAAOC,UAAU,yCAAzB,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,yBACEC,KAAK,SACLD,UAAU,0BACVE,cAAY,WACZC,cAAY,gCAJd,UAMG,IACD,sBAAMH,UAAU,UAAhB,oEAA2C,IAC3C,sBAAMA,UAAU,aAAmB,IACnC,sBAAMA,UAAU,aAAmB,IACnC,sBAAMA,UAAU,aAAmB,OAErC,mBAAGA,UAAU,2BAA2BI,KAAK,YAA7C,mIAEK,OAGP,qBACEJ,UAAU,2BACVD,GAAG,+BAFL,SAIE,qBAAIC,UAAU,8BAAd,UACE,6BACE,mBAAGI,KAAK,YAAYJ,UAAU,cAA9B,wFAIF,6BACE,mBAAGI,KAAK,YAAYJ,UAAU,cAA9B,iF,QC/BDK,EAAS,SAACP,GACrB,OACE,wBAAQC,GAAG,SAAX,SACE,sBAAKC,UAAU,QAAf,UACE,cAAC,IAAD,CAAaC,KAAK,SAASK,GAAI,CAACC,OAAQ,EAAGC,SAAS,WAAYC,IAAI,KACpE,qBAAKT,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SAEE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,sCAAf,UACE,+BACGF,EAAMY,KAAOZ,EAAMY,KAAKC,MAAQ,mDACjC,4BAEF,4BAAIb,EAAMY,KAAOZ,EAAMY,KAAKE,UAAY,qDACxC,mBACER,KAAK,YACLJ,UAAU,oCAFZ,oEAKK,mBCtBRa,EAAW,SAACf,GACvB,OACE,qBAAKC,GAAG,WAAWC,UAAU,cAA7B,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,0CAAf,SACE,6GAEF,qBAAKA,UAAU,MAAf,SACGF,EAAMY,KACHZ,EAAMY,KAAKI,KAAI,SAACC,EAAGC,GAAJ,OACb,sBAA6BhB,UAAU,oBAAvC,UACG,IACD,mBAAGA,UAAWe,EAAEE,OAChB,6BAAKF,EAAEJ,QACP,4BAAII,EAAEG,SAJR,UAAaH,EAAEJ,MAAf,YAAwBK,OAO1B,8DCjBDG,EAAW,SAACrB,GACvB,OACE,qBAAKC,GAAG,WAAWC,UAAU,cAA7B,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,6IAEF,qBAAKA,UAAU,MAAf,SACGF,EAAMY,KACHZ,EAAMY,KAAKI,KAAI,SAACC,EAAGC,GAAJ,OACb,gCACG,IACD,mBAAGhB,UAAWe,EAAEE,OAChB,sBAAKjB,UAAU,eAAf,UACE,6BAAI,mBAAGI,KAAK,oBAAR,SAA6BW,EAAEK,SACnC,4BAAIL,EAAEG,YALV,UAAaH,EAAEK,KAAf,YAAuBJ,OASzB,2DCnBDK,G,MAAS,SAACvB,GAErB,OACE,8BACE,qBAAKC,GAAG,SAAR,SACE,qBAAKC,UAAU,wBAAf,SACE,kD,gBCkCKsB,GA5BO,I,OAAIC,GAAa,eAAgB,CACrDC,MAAO,IACPC,iBAAiB,IAGP,WAAO,IAAD,EAC8BC,mBAAS,IADvC,mBACTC,EADS,KACQC,EADR,KAMhB,OAJAC,qBAAU,WACRD,EAAmBE,KAClB,IAGD,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAQpB,KAAMiB,EAAgBtB,SAC9B,cAAC,EAAD,CAAUK,KAAMiB,EAAgBd,WAChC,cAAC,EAAD,CAAUH,KAAMiB,EAAgBR,WAOhC,cAAC,EAAD,SCvBcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cadb552b.chunk.js","sourcesContent":["export const Navigation = (props) => {\n  return (\n    <nav id='menu' className='navbar navbar-default navbar-fixed-top'>\n      <div className='container'>\n        <div className='navbar-header'>\n          <button\n            type='button'\n            className='navbar-toggle collapsed'\n            data-toggle='collapse'\n            data-target='#bs-example-navbar-collapse-1'\n          >\n            {' '}\n            <span className='sr-only'>Навигация</span>{' '}\n            <span className='icon-bar'></span>{' '}\n            <span className='icon-bar'></span>{' '}\n            <span className='icon-bar'></span>{' '}\n          </button>\n          <a className='navbar-brand page-scroll' href='#page-top'>\n            ГОТОВАЯ СУМКА В РОДДОМ\n          </a>{' '}\n        </div>\n\n        <div\n          className='collapse navbar-collapse'\n          id='bs-example-navbar-collapse-1'\n        >\n          <ul className='nav navbar-nav navbar-right'>\n            <li>\n              <a href='#features' className='page-scroll'>\n                Преимущества\n              </a>\n            </li>\n            <li>\n              <a href='#services' className='page-scroll'>\n                Связаться\n              </a>\n            </li>\n            \n          </ul>\n        </div>\n      </div>\n    </nav>\n  )\n}\n","import ParticlesBg from \"particles-bg\";\n\nexport const Header = (props) => {\n  return (\n    <header id='header'>\n      <div className='intro'>\n        <ParticlesBg type=\"circle\" bg={{zIndex: 0, position:\"absolute\", top:0}} />\n        <div className='overlay'>\n          <div className='container'>\n          \n            <div className='row'>\n              <div className='col-md-8 col-md-offset-2 intro-text'>\n                <h1>\n                  {props.data ? props.data.title : 'загрузка'}\n                  <span></span>\n                </h1>\n                <p>{props.data ? props.data.paragraph : 'загрузка'}</p>\n                <a\n                  href='#features'\n                  className='btn btn-custom btn-lg page-scroll'\n                >\n                  Подробнее\n                </a>{' '}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  )\n}\n","export const Features = (props) => {\n  return (\n    <div id='features' className='text-center'>\n      <div className='container'>\n        <div className='col-md-10 col-md-offset-1 section-title'>\n          <h2>Готовый набор</h2>\n        </div>\n        <div className='row'>\n          {props.data\n            ? props.data.map((d, i) => (\n                <div key={`${d.title}-${i}`} className='col-xs-6 col-md-3'>\n                  {' '}\n                  <i className={d.icon}></i>\n                  <h3>{d.title}</h3>\n                  <p>{d.text}</p>\n                </div>\n              ))\n            : 'Загрузка...'}\n        </div>\n      </div>\n    </div>\n  )\n}\n","export const Services = (props) => {\n  return (\n    <div id='services' className='text-center'>\n      <div className='container'>\n        <div className='section-title'>\n          <h2>Как с нами связаться</h2>\n        </div>\n        <div className='row'>\n          {props.data\n            ? props.data.map((d, i) => (\n                <div key={`${d.name}-${i}`}>\n                  {' '}\n                  <i className={d.icon}></i>\n                  <div className='service-desc' >\n                    <h3><a href=\"www.instagram.com\">{d.name}</a></h3>\n                    <p>{d.text}</p>\n                  </div>\n                </div>\n              ))\n            : 'загрузка'}\n        </div>\n      </div>\n    </div>\n  )\n}\n","export const Footer = (props) => {\n  \n  return (\n    <div>\n      <div id='footer'>\n        <div className='container text-center'>\n          <p>\n            &copy; 2021\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport { Navigation } from './components/navigation'\nimport { Header } from './components/header'\nimport { Features } from './components/features'\nimport { About } from './components/about'\nimport { Services } from './components/services'\nimport { Gallery } from './components/gallery'\nimport { Testimonials } from './components/testimonials'\nimport { Footer } from './components/footer'\nimport JsonData from './data/data.json'\nimport SmoothScroll from 'smooth-scroll'\n\nexport const scroll = new SmoothScroll('a[href*=\"#\"]', {\n  speed: 1000,\n  speedAsDuration: true,\n})\n\nconst App = () => {\n  const [landingPageData, setLandingPageData] = useState({})\n  useEffect(() => {\n    setLandingPageData(JsonData)\n  }, [])\n\n  return (\n    <div>\n      <Navigation />\n      <Header data={landingPageData.Header} />\n      <Features data={landingPageData.Features} />\n      <Services data={landingPageData.Services}/>\n      {\n        //<About data={landingPageData.About} />\n        // <Services data={landingPageData.Services} />\n        // <Gallery />\n        //<Testimonials data={landingPageData.Testimonials} />\n      }\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}